# global vars
repo=os.environ.get('LOCALDEV_REPO', '/repo')
lfrdev_domain=os.environ.get('LFRDEV_DOMAIN')

# Function process_extension
def process_extension(
    name, projectPath, workload, targetPort, virtual_instance_id="dxp.%s" % lfrdev_domain,
    source_deps=[], objects=[], port_forwards=[], resource_deps=[], links=[], cpu='', memory=''):

  more_deps = []
  for source_dep in source_deps:
    more_deps.append("/workspace/%s/%s" % (projectPath, source_dep))

  gradlePath=projectPath.replace('/', ':')

  build_args=" ".join([
    "/workspace/gradlew",
    "--project-dir",
    "/workspace",
    ":%s:clean" % gradlePath,
    ":%s:buildClientExtensionDockerImage" % gradlePath,
    #":%s:applyClientExtensionConfigMap" % gradlePath,
    "--stacktrace",
    "-PserviceId=%s" % name,
    "-PvirtualInstanceId=%s" % virtual_instance_id,
    "-PlfrdevDomain=%s" % lfrdev_domain,
    "-PimageId=$EXPECTED_REF"])

  custom_build(
    name,
    build_args,
    deps=[
      "/workspace/%s/Dockerfile" % projectPath,
      "/workspace/%s/assets" % projectPath,
      "/workspace/%s/build.gradle" % projectPath,
      "/workspace/%s/client-extension.yaml" % projectPath,
      "/workspace/%s/src" % projectPath,
    ] + more_deps,
    ignore=[])

  init_metadata = False

  if workload != "static":
    init_metadata = True

  ytt_args=[
    'ytt',
    "-f %s/k8s/workloads/%s" % (repo, workload),
    "--data-value-yaml initMetadata=%s" % init_metadata,
    "--data-value image=%s" % name,
    "--data-value serviceId=%s" % name,
    "--data-value-yaml targetPort=%s" % targetPort,
    "--data-value virtualInstanceId=%s" % virtual_instance_id,
    "--data-value lfrdevDomain=%s" % lfrdev_domain]

  if cpu != '':
    ytt_args.append("--data-value-yaml cpu=%s" % cpu)
  
  if memory != '':
    ytt_args.append("--data-value-yaml memory=%s" % memory)

  find_args=[
    "find /workspace/client-extensions/%s" % name,
    "-name *.client-extension-config.json",
    "-not -path '*/node_modules/*' -not -path '*/node_modules_cache/*'",
    "2>/dev/null"
  ]

  client_extension_config_json_files=str(local(" ".join(find_args))).splitlines()

  for json_file in client_extension_config_json_files:
    print("json_file=%s" % json_file)
    ytt_args.append("-f %s" % json_file)

  k8s_yaml(local(" ".join(ytt_args)))

  if workload != 'job':
    objects=[
      "%s:ingress" % name, 
      "%s:ingressroute" % name]

  k8s_resource(
    labels=['Extensions'],
    port_forwards=port_forwards,
    #objects=objects,
    objects=['%s-%s-lxc-ext-provision-metadata:configmap' % (name, virtual_instance_id)] + objects,
    resource_deps=["dxp.%s" % lfrdev_domain] + resource_deps,
    workload=name,
    links=links)

#main code

update_settings(max_parallel_updates=1)

watch_file("%s/k8s/endpoint/" % repo)
watch_file("%s/k8s/workloads/" % repo)

if config.tilt_subcommand == 'down':
  local('kubectl delete cm -l lxc.liferay.com/metadataType=dxp')
  local('kubectl delete cm -l lxc.liferay.com/metadataType=ext-init')
  local('kubectl delete cm -l lxc.liferay.com/metadataType=ext-provision')
  local("%s/scripts/dxp-stop.sh" % repo)

# build and launch dxp

local_resource(
  "dxp.%s" % lfrdev_domain,
  cmd="%s/scripts/dxp-build.sh" % repo,
  serve_cmd="%s/scripts/dxp-restart.sh" % repo,
  deps=["%s/docker/images/dxp-server" % repo],
  readiness_probe=probe(
      initial_delay_secs=120,
      timeout_secs=5,
      period_secs=5,
      failure_threshold=99,
      exec=exec_action(["%s/scripts/dxp-status.sh" % repo])),
  trigger_mode = TRIGGER_MODE_MANUAL,
  links=[
    link("https://dxp.%s" % lfrdev_domain),
    link("https://dxp.%s/o/api" % lfrdev_domain, 'Liferay API Explorer'),
  ],
  labels=['DXP'])

# create all client-extension-config.json files
if config.tilt_subcommand != 'down':
  local("/workspace/gradlew --project-dir /workspace clean createClientExtensionConfig")

client_extension_yaml_files=str(
  local(
    """find \
      /workspace/client-extensions \
      -name client-extension.yaml \
      -not -path '*/build/*' \
      -not -path '*/node_modules/*' \
      -not -path '*/node_modules_cache/*' \
      2>/dev/null"""
  )
).splitlines()

for client_extension_yaml_file in client_extension_yaml_files:
  project_path=os.path.dirname(client_extension_yaml_file)
  client_extension_name=os.path.basename(project_path)
  client_extension_object=read_yaml(client_extension_yaml_file)

  # defaults
  workload='static'
  resource_deps=[]
  targetPort=80
  watch=[]
  cpu=''
  memory=''
  links=[]

  if client_extension_object.get('runtime'):
    if client_extension_object['runtime'].get('workload') != None:
      workload=client_extension_object['runtime']['workload']

    if client_extension_object['runtime'].get('deps') != None:
      resource_deps=[client_extension_object['runtime']['deps'][0]]

    if client_extension_object['runtime'].get('port') != None:
      targetPort=client_extension_object['runtime']['port']

    if client_extension_object['runtime'].get('watch') != None:
      watch=client_extension_object['runtime']['watch']

    if client_extension_object['runtime'].get('cpu') != None:
      cpu=client_extension_object['runtime']['cpu']

    if client_extension_object['runtime'].get('memory') != None:
      memory=client_extension_object['runtime']['memory']
  
  if workload != 'job':
    links=[link("https://%s.%s" % (client_extension_name, lfrdev_domain))]

  # TODO call a script that can expand globs that may be passed into watch property
  # paths=local(/repo/scripts/unroll-globs.sh watch)
  # source_deps=paths

  process_extension(
    client_extension_name,
    "client-extensions/%s" % client_extension_name,
    source_deps=watch,
    targetPort=targetPort,
    workload=workload,
    cpu=cpu,
    memory=memory,
    resource_deps=resource_deps,
    links=links)